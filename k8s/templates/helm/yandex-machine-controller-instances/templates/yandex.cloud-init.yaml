apiVersion: v1
data:
  folderID: YjFnNzIyMG5zM3I1ZHRzMWxoYTM=
  serviceAccountJSON: ewogICAiaWQiOiAiYWplYXM4ZnNraTExbTM0cDllcXAiLAogICAic2VydmljZV9hY2NvdW50X2lkIjogImFqZTdma3M2MWJkNWlzM3ZtaXVoIiwKICAgImNyZWF0ZWRfYXQiOiAiMjAyMi0xMi0xN1QxOTozNjoyNS42MjM4MjM1NThaIiwKICAgImtleV9hbGdvcml0aG0iOiAiUlNBXzIwNDgiLAogICAicHVibGljX2tleSI6ICItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF0dkRRbVdiRHk4L3JiOFpuMjhoalxuR20xVlFqQTZkYXBkR3h2UzhaWmhaalVpaUp3SnZxWmI5b1cvNDFheEJIRnBGUmgwRXk2YWxuazFWZ2JoRXArVFxuWjhTTWNWTlE4OEh3UUVQU2p4ZmJISTA0THpVczJseXZ3WGYzV0ZIY1VkVjZieVEwVTdXNGZ5T25JUE9Vazh3U1xudjVRWks4dk1HZWR3Q3pWZEprNVN0RzAyajkxbkEwK0wxUk55ZmdRK0ZLdFdHcXhWUFA2cHgrMitpZ3cwZjJ6RFxubEhScmxyRnNoV3F2NVZQd3Y1Qno0Skc4alIzbmZPa2tqT1pFWjR3QTdaUTJHSXM1K2FWejNXNFZvRUxqa0dTcFxuTnNSSFFKNnpKVWxEN1NxRHYydSttZmxOYjJxRUE0UWxtZDJlSjV6cXc0S2dmNStGQ2dpamNkTytickFycUp0UFxuOFFJREFRQUJcbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVxuIiwKICAgInByaXZhdGVfa2V5IjogIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxuTUlJRXZnSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS2d3Z2dTa0FnRUFBb0lCQVFDMjhOQ1pac1BMeit0dlxueG1mYnlHTWFiVlZDTURwMXFsMGJHOUx4bG1GbU5TS0luQW0rcGx2MmhiL2pWckVFY1drVkdIUVRMcHFXZVRWV1xuQnVFU241Tm54SXh4VTFEendmQkFROUtQRjlzY2pUZ3ZOU3phWEsvQmQvZFlVZHhSMVhwdkpEUlR0YmgvSTZjZ1xuODVTVHpCSy9sQmtyeTh3WjUzQUxOVjBtVGxLMGJUYVAzV2NEVDR2VkUzSitCRDRVcTFZYXJGVTgvcW5IN2I2S1xuRERSL2JNT1VkR3VXc1d5RmFxL2xVL0Mva0hQZ2tieU5IZWQ4NlNTTTVrUm5qQUR0bERZWWl6bjVwWFBkYmhXZ1xuUXVPUVpLazJ4RWRBbnJNbFNVUHRLb08vYTc2WitVMXZhb1FEaENXWjNaNG5uT3JEZ3FCL240VUtDS054MDc1dVxuc0N1b20wL3hBZ01CQUFFQ2dnRUFCVlk4N0JkbERqUyt0d081RTBJNGhKU0R1emtqMmExYmJqV1V6N09wZjRZblxuVGQyYkNBOWJlWE9GcDZ0bmI3cUY3R0JuQnUwZWtnN0V1RmI2WHBwaDAzelBueXVlRDd5ZWk4TXV3ZVRMNzdWb1xuUzl5MTBwbHJLeTVGaXQ0cktPbzVUQXErQXJnTXd3MHk0Yi9FRFlYM0hadmdHbFVYVzAvaGVKQjFvLzAzMTFZSlxuVHE3N1E4M2F4NWpxS04rNjNXSnlGYWE3MytVT2wvZU15TW5OK3NZUkhwRUZMY2FOanFpR1ROT1J5RjNaMnp1T1xuSTh5b2JjRW1SL0U3R1pZRE1zc0NacEJpZEpIb0ZRb0s4aFZLZlk5QVo2K2dNcXVYL0trNGZnaUdnZk96UG1xS1xuTzlHNXhPTEZuR3gyT1dPekVUTzh2blBqQnc2NlB5OUpPYUUxcEttdERRS0JnUUM1NnYzYzdpRk5uUE1qUlp4U1xuRFE5NE9DTUhJYlFGWmdvK1RHV2ZPN1VpZTYwQ3NPN2c3VVZ5TWJGSVRBQ2pJUnBOdEVZS1FCNnF6YmxEcDhrOFxuWUNjYTgvalR3RTBIVTFaOUVRb1h2YUE0UEZqMTZJRGtOVTBDWWgrZHZoZnY3WEkyY2x0aTc3SzdRM0tqWjRhcVxuZDZ4THJkSGxMbUxpS2wyYjdLVXRQK2dPZ3dLQmdRRDc1b1Q0bDg0d1pacUFwSG9xMENJVEtlbjRJamdHTnZaV1xuOEpSMm9Od3lzYkFTTUNPNTdNSTRpV3BIaEdEQjIrckNhWHN3d0FZVjY1T2J5TE85am1VcVNUTWV3ZjR4WU5IV1xuS25mbm9vSk15Z2h0TXo5ckV2NldEeFJaQlIrRUQ4NDQ0Rm5FSFVDZWNWWXlxbWZQRTFRS09pekRKNy94amRYN1xuT2pNemloS2Rld0tCZ0hiaUtCRUZDTENyZ3VIMEdrQnhiNG50UTZERTBXdCtVMkNBMDU2ZHZIYmZaTU5LeG9WM1xuMDZkdzFTOG93bU9Od0ZjZHhvZTVkcUs3eUJMV0VKMFYwd3V1SkZlcktOWmRXUG5DVXBUWndjRVQvY0xKT05vMFxucHhpMkRBZC9UYWt6U1l3OVZlaU80OWhSQ2RZcFZmaGRiQVE4a3ZJYzFraE8xT3JteUx5Rmwrcm5Bb0dCQVBOZlxuRmwxdm5ZQll5ZHM4RGVSTFRvQ2hZREdpTGVxak00RnYwcUNDYmZ4MGZCNDJjRzN6ZHZwVW1XQWJYN2dzbHpYWlxuMzNHTU5OVDgwNUlSYU1iZFNwUitRR3VaRmRQekxRano0d0RpbTIxQlRMN2tZb002eU1tR0xDeU5ySk5WQ2ZNZFxubnR6QlBtdFdLT2V1aDdramZYQ2NJQjgweWxmQXAxcWdNbE83Tkp6OUFvR0JBSVZwWmRNUklQeWw1NDdxZ0RmK1xuZ25yWVY4VGZxTlpVLzkySzg3QXpCbi82UHAxcGVQaHNFcDAvUE5yVUR3ZGF3Sk9JQk8xM2lHSndxZXdxRDV5QlxueGNFbXQ5NXIvSlArVGRIYndTRWZ2bTU0OE12TnlDVFBuQjFLMmdhSSt2TlI4c2xjVEdtam9WUjFNRDhodlN6WlxubG1oMTZHRDhRMnF5V0hGS3laTFRRYUtyXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXG4iCn0=
  userData: 
kind: Secret
metadata:
  name: treska-{{ .Values.zone }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook-weight": "1"
type: Opaque
