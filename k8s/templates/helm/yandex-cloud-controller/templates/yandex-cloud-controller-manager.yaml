# NOTE: this manifest is only compatible with Kubernetes versions >=v1.21

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
# ---
# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   name: yandex-cloud-controller-manager
#   labels:
#     k8s-app: yandex-cloud-controller-manager
# spec:
#   selector:
#     matchLabels:
#       k8s-app: yandex-cloud-controller-manager
#   template:
#     metadata:
#       labels:
#         k8s-app: yandex-cloud-controller-manager
#     spec:
#       hostNetwork: true
#       dnsPolicy: Default
#       serviceAccountName: cloud-controller-manager
#       nodeSelector:
#         # The CCM will only run on masters
#         node-role.kubernetes.io/control-plane: ""
#       tolerations:
#         - key: node-role.kubernetes.io/master
#         - key: node-role.kubernetes.io/control-plane
#         - key: node.kubernetes.io/not-ready
#         - key: node.kubernetes.io/out-of-disk
#         - key: node.kubernetes.io/memory-pressure
#         - key: node.kubernetes.io/disk-pressure
#         - key: node.cloudprovider.kubernetes.io/uninitialized
#           value: "true"
#           effect: NoSchedule
#       containers:
#         - image: registry.deckhouse.io/yandex-cloud-controller-manager/yandex-cloud-controller-manager:v0.21.3
#           name: yandex-cloud-controller-manager
#           command:
#             - /bin/yandex-cloud-controller-manager
#             - --cloud-provider=yandex
#             - --v=3
#           resources:
#             requests:
#               cpu: 100m
#               memory: 50Mi
#           env:
#             - name: YANDEX_CLOUD_SERVICE_ACCOUNT_JSON
#               valueFrom:
#                 secretKeyRef:
#                   name: yandex-cloud
#                   key: service-account-json
#             - name: YANDEX_CLOUD_FOLDER_ID
#               valueFrom:
#                 secretKeyRef:
#                   name: yandex-cloud
#                   key: folder-id
#             - name: YANDEX_CLOUD_DEFAULT_LB_TARGET_GROUP_NETWORK_ID
#               valueFrom:
#                 secretKeyRef:
#                   name: yandex-cloud
#                   key: vpc-id    
#             - name: YANDEX_CLOUD_INTERNAL_NETWORK_IDS
#               valueFrom:
#                 secretKeyRef:
#                   name: yandex-cloud
#                   key: vpc-id
#             - name: YANDEX_CLUSTER_NAME
#               value: {{ .Values.cluster_name }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloud-controller-manager
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: cloud-controller-manager
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: cloud-controller-manager
    spec:
      containers:
      - args:
        - --leader-elect=true
        - --cluster-cidr=10.100.0.0/16
        - --allocate-node-cidrs=true
        - --configure-cloud-routes=true
        - --cloud-provider=yandex
        - --cluster-name=cluster-2
        - --bind-address=$(HOST_IP)
        - --secure-port=10471
        - --v=2
        env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: YANDEX_CLUSTER_NAME
          value: cluster-2
        - name: YANDEX_CLOUD_SERVICE_ACCOUNT_JSON
          valueFrom:
            secretKeyRef:
              name: yandex-cloud
              key: service-account-json
        - name: YANDEX_CLOUD_DEFAULT_LB_LISTENER_SUBNET_ID
        - name: YANDEX_CLOUD_DEFAULT_LB_TARGET_GROUP_NETWORK_ID
          valueFrom:
            secretKeyRef:
              name: yandex-cloud
              key: vpc-id   
        - name: YANDEX_CLOUD_INTERNAL_NETWORK_IDS
          valueFrom:
            secretKeyRef:
              name: yandex-cloud
              key: vpc-id   
        - name: YANDEX_CLOUD_EXTERNAL_NETWORK_IDS
        - name: YANDEX_CLOUD_ROUTE_TABLE_ID
          valueFrom:
            secretKeyRef:
              name: yandex-cloud
              key: route_table_id
        image: registry.deckhouse.io/deckhouse/ce:bfbae39acd8fbe3ecb8b287214357906dd2815a805f5b56d548c48c9-1663920311654
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: https
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: yandex-cloud-controller-manager
        ports:
        - containerPort: 10471
          hostPort: 10471
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: https
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            ephemeral-storage: 60Mi
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      dnsPolicy: Default
      hostNetwork: true
      # imagePullSecrets:
      # - name: deckhouse-registry
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      priorityClassName: system-cluster-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccount: cloud-controller-manager
      serviceAccountName: cloud-controller-manager
      terminationGracePeriodSeconds: 30
      tolerations:
      - operator: Exists
      volumes:
      - emptyDir: {}
        name: tmp
